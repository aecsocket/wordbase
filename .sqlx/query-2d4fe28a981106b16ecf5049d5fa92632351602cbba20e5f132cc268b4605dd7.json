{
  "db_name": "SQLite",
  "query": "\n            -- use a CTE to get results for all records matching the headword and reading,\n            -- instead of `WHERE headword = $2 OR reading = $2`\n            -- this makes it clear to the query planner that we want to use these indexes:\n            -- - `record(headword, source, kind)`\n            -- - `record(reading, source, kind)`\n            --\n            -- otherwise, the query planner might use the `record(source)` index,\n            -- which would kill performance\n            WITH base AS (\n                SELECT headword, reading, record FROM term_record\n                INDEXED BY term_record_query_headword\n                WHERE headword = $2\n\n                -- we can get away with `UNION ALL` here,\n                -- because we don't guarantee to callers that there won't be duplicate records\n                UNION ALL\n\n                SELECT headword, reading, record FROM term_record\n                INDEXED BY term_record_query_reading\n                WHERE reading = $2\n            )\n            SELECT\n                record.id,\n                record.source,\n                record.kind,\n                record.data,\n                base.headword,\n                base.reading,\n                profile_frequency.mode AS 'profile_frequency_mode?',\n                profile_frequency.value AS 'profile_frequency_value?',\n                source_frequency.mode AS 'source_frequency_mode?',\n                source_frequency.value AS 'source_frequency_value?'\n            FROM record\n            JOIN base ON record.id = base.record\n\n            -- make sure the dictionary we're getting this record from is enabled\n            INNER JOIN dictionary ON record.source = dictionary.id\n            INNER JOIN profile_enabled_dictionary ped\n                ON (ped.profile = $1 AND ped.dictionary = dictionary.id)\n\n            -- join on profile-global frequency information, for the `ORDER BY` below\n            LEFT JOIN frequency profile_frequency ON (\n                -- only use frequency info from the currently selected sorting dict in this profile\n                profile_frequency.source = (\n                    SELECT sorting_dictionary FROM profile\n                    WHERE id = $1\n                )\n                AND profile_frequency.headword = base.headword\n                AND profile_frequency.reading = base.reading\n            )\n\n            -- join on frequency information for this source\n            LEFT JOIN frequency source_frequency ON (\n                source_frequency.source = record.source\n                AND source_frequency.headword = base.headword\n                AND source_frequency.reading = base.reading\n            )\n\n            ORDER BY\n                CASE\n                    -- prioritize results where both the headword and reading match the lemma\n                    -- e.g. if you typed あらゆる:\n                    -- - the first results would be for the kana あらゆる\n                    -- - then the kanji like 汎ゆる\n                    WHEN base.reading = $2 AND base.headword = $2 THEN 0\n                    -- then prioritize results where at least the reading or headword are an exact match\n                    -- e.g. in 念じる, usually 念ずる comes up first\n                    -- but this is obviously a different reading\n                    -- so we want to prioritize 念じる\n                    WHEN base.reading = $2 OR base.headword = $2 THEN 1\n                    -- all other results at the end\n                    ELSE 2\n                END,\n                -- user-specified dictionary sorting position always takes priority\n                dictionary.position,\n                -- put entries without an explicit frequency value last\n                CASE\n                    WHEN profile_frequency.mode IS NULL THEN 1\n                    ELSE 0\n                END,\n                -- sort by profile-global frequency info\n                CASE\n                    -- frequency rank\n                    WHEN profile_frequency.mode = 0 THEN  profile_frequency.value\n                    -- frequency occurrence\n                    WHEN profile_frequency.mode = 1 THEN -profile_frequency.value\n                    ELSE 0\n                END,\n                -- sort by source-specific frequency info\n                CASE\n                    WHEN source_frequency.mode = 0 THEN  source_frequency.value\n                    WHEN source_frequency.mode = 1 THEN -source_frequency.value\n                    ELSE 0\n                END",
  "describe": {
    "columns": [
      {
        "name": "id",
        "ordinal": 0,
        "type_info": "Integer"
      },
      {
        "name": "source",
        "ordinal": 1,
        "type_info": "Integer"
      },
      {
        "name": "kind",
        "ordinal": 2,
        "type_info": "Integer"
      },
      {
        "name": "data",
        "ordinal": 3,
        "type_info": "Blob"
      },
      {
        "name": "headword",
        "ordinal": 4,
        "type_info": "Text"
      },
      {
        "name": "reading",
        "ordinal": 5,
        "type_info": "Text"
      },
      {
        "name": "profile_frequency_mode?",
        "ordinal": 6,
        "type_info": "Integer"
      },
      {
        "name": "profile_frequency_value?",
        "ordinal": 7,
        "type_info": "Integer"
      },
      {
        "name": "source_frequency_mode?",
        "ordinal": 8,
        "type_info": "Integer"
      },
      {
        "name": "source_frequency_value?",
        "ordinal": 9,
        "type_info": "Integer"
      }
    ],
    "parameters": {
      "Right": 2
    },
    "nullable": [
      false,
      false,
      false,
      false,
      true,
      true,
      false,
      false,
      false,
      false
    ]
  },
  "hash": "2d4fe28a981106b16ecf5049d5fa92632351602cbba20e5f132cc268b4605dd7"
}
